@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@model LoginViewModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "TabCollab";
}

<div class="center-form-outer-container" align="center">
    <div class="center-form-inner-container">
        <h2>@ViewData["Title"]</h2>
        <form asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal form-center">
            <div asp-validation-summary="All"></div>
            <div class="form-group">
                <div class="form-label">
                    <label asp-for="Username" class="float-left"></label>
                </div>
                <input asp-for="Username" class="form-control form-input" />
                <span asp-validation-for="Username"></span>
            </div>
            <div class="form-group">
                <div class="form-label">
                    <label asp-for="Password"></label>
                </div>
                <input asp-for="Password" class="form-control form-input" />
                <span asp-validation-for="Password"></span>
            </div>
            <div class="form-group">
                <div class="form-label">
                    <div class="checkbox">
                        <label asp-for="RememberMe">
                            <input asp-for="RememberMe" />
                            @Html.DisplayNameFor(m => m.RememberMe)
                        </label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-default button-submit-wide">Log in</button>
            </div>
        </form>
        @{
            var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (loginProviders.Count == 0)
            {
                <div>
                    <p>
                        There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                        for details on setting up this ASP.NET application to support logging in via external services.
                    </p>
                </div>
            }
            else
            {
                <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal form-center">
                    <div>
                        <p>
                            @foreach (var provider in loginProviders)
                            {
                                <button type="submit" class="btn btn-default button-submit-wide" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">Log in with @provider.DisplayName</button>
                            }
                        </p>
                    </div>
                </form>
            }
        }
        <form asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal form-center">
            <div asp-validation-summary="All"></div>
            <div class="form-group">
                <div class="form-label">
                    <p>
                        <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]">Register as a new user?</a>
                    </p>
                    <p>
                        <a asp-action="ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </div>
        </form>
    </div>
</div>

<div id='forgot-password-form-modal' class='modal fade' align="center">
    <div id='forgot-password-form-container'>
    </div>
</div>

@section Scripts {
@{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
<script>
    $(document).on("submit", function (e, data) {
        // Show spinner on login button
        $($(document.activeElement)[0]).html('<div class="loader"></div>');
    });
</script>
}
