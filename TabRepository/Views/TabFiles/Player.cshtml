@{
    ViewBag.Title = "Player";
    Layout = "~/Views/Shared/_PlayerLayout.cshtml";
}

<style>
    /*Custom collapse point for the player page*/
    @@media (max-width: 1100px) {
      .navbar-header {
          float: none;
      }
      .navbar-left,.navbar-right {
          float: none !important;
      }
      .navbar-toggle {
          display: block;
      }
      .navbar-collapse {
          border-top: 1px solid transparent;
          box-shadow: inset 0 1px 0 rgba(255,255,255,0.1);
      }
      .navbar-fixed-top {
          top: 0;
          border-width: 0 0 1px;
      }
      .navbar-collapse.collapse {
          display: none!important;
      }
      .navbar-nav {
          float: none!important;
          margin-top: 7.5px;
      }
      .navbar-nav>li {
          float: none;
      }
      .navbar-nav>li>a {
          padding-top: 10px;
          padding-bottom: 10px;
      }
      .collapse.in{
          display:block !important;
      }
    }
</style>

<h2></h2>

<link href="~/css/player.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.7.2/css/bootstrap-slider.min.css" integrity="sha256-6b+gYy3DG/roKdQiHqp1FJYFQkaZdM6ohUpGyFyUAGk=" crossorigin="anonymous" />

<div id="alphaTab" class="alphaTab" data-file="@Url.Action("Download", "TabFiles", new { ViewBag.Id })" data-tracks="0"
     data-player="@Url.Content("~/misc/default.sf2")" data-player-offset="[-10,-70]"></div>

@section scripts
    {
    <script src="~/lib/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js"></script>
    <script src="~/js/AlphaTab.js"></script>
    <script src="~/js/jquery.alphaTab.js"></script>
    <script src="~/js/swfobject.js"></script>
    <script src="~/js/AlphaSynth.js"></script>
    <script src="~/js/jquery.alphaTab.alphaSynth.js"></script>

    <script type="text/javascript">
        var at = $('#alphaTab');

        //
        // 1. setup events
        at.on('alphaTab.soundFontLoad', function (e, progress) {
            var percentage = ((progress.loaded / progress.total) * 100) | 0;
            $('#soundFontProgress').css('width', percentage + '%').text(percentage + '%');
        });
        at.on('alphaTab.soundFontLoaded', function () {
            $('#soundFontProgressMenuItem').hide();
        });
        at.on('alphaTab.playerReady', function () {
            $('#loadingInfo').hide();
            $('#playPause').prop('disabled', false).removeAttr('disabled');
            $('#stop').prop('disabled', false).removeAttr('disabled');
            updateControls();
        });
        at.on('alphaTab.playerStateChanged', function () {
            updateControls();
        });

        //
        // 2. Load alphaTab
        at.alphaTab();

        //
        // 3. Setup UI controls and use API to control the playback

        $('#print').click(function () {
            at.alphaTab('print');
        });

        $('#playPause').click(function () {
            at.alphaTab('playPause');
        });

        $('#stop').click(function () {
            at.alphaTab('stop');
        });

        $('#playbackSpeedSelector a').click(function () {
            var playbackSpeed = $(this).data('value');
            at.alphaTab('playbackSpeed', playbackSpeed);
            $('#playbackSpeed').text($(this).text());
        });

        function updateControls() {
            var playerState = at.alphaTab('playerState');
            switch (playerState) {
                case 0: // stopped/paused
                    $('#playPause').removeClass('glyphicon-pause').addClass('glyphicon-play');
                    break;
                case 1: // playing
                    $('#playPause').removeClass('glyphicon-play').addClass('glyphicon-pause');
                    break;
            }
        }

        //
        // 4. Track selector
        var tracks = [];
        // keep dropdown open
        $('#trackList').on('click', function (e) {
            e.stopPropagation();
        });
        at.on('alphaTab.loaded', function (e, score) {
            var trackList = $('#trackList');
            trackList.empty();

            for (var i = 0; i < score.Tracks.length; i++) {
                // build list item for track
                var li = $('<li></li>')
                    .data('track', score.Tracks[i].Index)
                    ;

                // show/hide button and track title
                var title = $('<div class="title"></div>');
                li.append(title);

                var showHide = $('<i class="glyphicon glyphicon-eye-close showHide"></i>');
                title.append(showHide);
                title.append(score.Tracks[i].Name);
                title.on('click', function (e) {
                    var track = $(this).closest('li').data('track');
                    tracks = [track];
                    $(this).find('.showHide').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');

                    // render new tracks
                    at.alphaTab('tracks', tracks);
                });

                // solo and mute buttons
                var soloMute = $('<div class="btn-group btn-group-xs"></div>');
                var solo = $('<button type="button" class="btn btn-default solo">Solo</button>');
                solo.on('click', function (e) {
                    $(this).toggleClass('checked');
                    var isSolo = $(this).hasClass('checked');
                    var track = $(this).closest('li').data('track');
                    at.alphaTab('soloTrack', track, isSolo);
                });

                var mute = $('<button type="button" class="btn btn-default mute">Mute</button>');
                mute.on('click', function (e) {
                    $(this).toggleClass('checked');
                    var isMute = $(this).hasClass('checked');
                    var track = $(this).closest('li').data('track');
                    at.alphaTab('muteTrack', track, isMute);
                });
                soloMute.append(solo).append(mute);
                li.append(soloMute);

                // volume slider
                var volume = $('<input type="text" />')
                    .on('slide', function (e) {
                        var track = $(this).closest('li').data('track');
                        at.alphaTab('trackVolume', track, e.value);
                    });
                li.append(volume);
                volume.slider({
                    min: 0,
                    max: 16,
                    step: 1,
                    value: score.Tracks[i].PlaybackInfo.Volume,
                    handle: 'square'
                })

                trackList.append(li);
            }
        });
        at.on('alphaTab.rendered', function (e) {
            // load track indices
            tracks = at.alphaTab('tracks');
            for (var i = 0; i < tracks.length; i++) {
                tracks[i] = tracks[i].Index;
            }

            // check checkboxes
            $('#trackList li').each(function () {
                var track = $(this).data('track');
                var isSelected = tracks.indexOf(track) > -1;
                if (isSelected) {
                    $(this).find('.showHide').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
                }
                else {
                    $(this).find('.showHide').removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
                }
            });
        });

        // Collapse navbar on play/pause/stop
        $('#playPause, #stop').on('click', function () {
            var navbarToggle = $('.navbar-toggle');

            if (navbarToggle.is(":visible")) {
                navbarToggle.click();
            }
        });
    </script>

}
