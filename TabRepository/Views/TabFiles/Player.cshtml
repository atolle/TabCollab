@{
    ViewBag.Title = "Player";
    Layout = "~/Views/Shared/_PlayerLayout.cshtml";
}

<h2></h2>

<link href="~/css/player.css" rel="stylesheet" />

<div id="spinner" style="min-height: 500px">
    <p align="center" style="font-size: 160%"> Loading tab... </p>
    <div class="sk-fading-circle">
        <div class="sk-circle1 sk-circle"></div>
        <div class="sk-circle2 sk-circle"></div>
        <div class="sk-circle3 sk-circle"></div>
        <div class="sk-circle4 sk-circle"></div>
        <div class="sk-circle5 sk-circle"></div>
        <div class="sk-circle6 sk-circle"></div>
        <div class="sk-circle7 sk-circle"></div>
        <div class="sk-circle8 sk-circle"></div>
        <div class="sk-circle9 sk-circle"></div>
        <div class="sk-circle10 sk-circle"></div>
        <div class="sk-circle11 sk-circle"></div>
        <div class="sk-circle12 sk-circle"></div>
    </div>
</div>

<div id="alphaTab" data-file="@Url.Action("Download", "TabFiles", new { ViewBag.Id })" data-tracks="0"></div>

@section scripts
{
    <script src="~/js/AlphaTab.js"></script>
    <script src="~/js/jquery.alphaTab.js"></script>
    <script src="~/js/swfobject.js"></script>
    <script src="~/js/AlphaSynth.js"></script>
    <script src="~/js/jquery.alphaTab.alphaSynth.js"></script>

    <script type="text/javascript">
        var playerReady = false;
        var playerState = 0;
        var at = $('#alphaTab');
        var spinner = document.getElementById('spinner');

        //
        // 1. Initialize track selector
        var tracks = [];
        at.on('loaded', function (e) {
            spinner.parentNode.removeChild(spinner);
            var score = e.originalEvent.detail;
            var trackList = $('#trackList');
            trackList.empty();

            for (var i = 0; i < score.Tracks.length; i++) {
                // build list item for track
                var li = $('<li></li>');
                var a = $('<a href="#"></a>')
                    .data('track', score.Tracks[i].Index)
                    .append('<input type="checkbox" />')
                    .append(score.Tracks[i].Name)

                    // here we build the new track list and render it
                    .on('click', function (e) {
                        var track = $(this).data('track');
                        var index = tracks.indexOf(track);
                        if (index > -1) {
                            tracks.splice(index, 1);
                            $(this).find('input').prop('checked', false);
                        }
                        else {
                            tracks.push(track);
                            tracks.sort(),
                            $(this).find('input').prop('checked', true);
                        }

                        // render new tracks
                        at.alphaTab('tracks', tracks);

                        $(e.target).blur();

                        return false;
                    });
                li.append(a);
                trackList.append(li);
            }
        });

        // update track list after rendering finished
        at.on('rendered', function (e) {
            // load track indices
            tracks = at.alphaTab('tracks');
            for (var i = 0; i < tracks.length; i++) {
                tracks[i] = tracks[i].Index;
            }

            // check checkboxes
            $('#trackList li a').each(function () {
                var track = $(this).data('track');
                var isSelected = tracks.indexOf(track) > -1;
                $(this).find('input').prop('checked', isSelected);
            });

            console.log(tracks);
        });

        //
        // 2. Load alphaTab
        at.alphaTab({
            useWorker: true
        });

        //
        // 3. Initialize Player and Setup Player UI
        var as = at.alphaTab('playerInit'); // init alphaSynth

        as.On('ready', function (r) {
            // load default data
            as.LoadSoundFontUrl('@Url.Content("~/misc/default.sf2")');
        });
        as.On('soundFontLoad', function (loaded, full) {
            var percentage = ((loaded / full) * 100) | 0;
            $('#soundFontProgress').css('width', percentage + '%').text(percentage + '%');
        });
        as.On('soundFontLoaded', function () {
            $('#soundFontProgressMenuItem').hide();
        });
        as.On('readyForPlay', function (r) {
            playerReady = r;
            updateControls();
        });
        as.On('playerStateChanged', function (s) {
            playerState = s;
            updateControls();
        });

        $('#playPause').click(function () {
            if (playerState == 1) {
                as.Pause();
            }
            else {
                as.Play();
            }
        });
        $('#stop').click(function () {
            as.Stop();
        });

        function updateControls() {
            if (!playerReady) {
                $('#loadingInfo').show()
                $('#controls button').attr('disabled', 'disabled');
            }
            else {
                $('#loadingInfo').hide()
                $('#playPause').prop('disabled', false);
                $('#stop').prop('disabled', false);
                $('#playPause').removeAttr('disabled');
                switch (playerState) {
                    case 0: // stopped
                        $('#playPause').removeClass('glyphicon-pause').addClass('glyphicon-play');
                        break;
                    case 1: // playing
                        $('#playPause').removeClass('glyphicon-play').addClass('glyphicon-pause');
                        $('#stop').removeAttr('disabled').removeClass('disabled');
                        break;
                    case 2: // paused
                        $('#playPause').removeClass('glyphicon-pause').addClass('glyphicon-play');
                        $('#stop').removeAttr('disabled').removeClass('disabled');
                        break;
                }
            }
        }

        $('a[data-layout]').click(function (e) {
            $('a[data-layout]').closest('li').removeClass('active');
            $(this).closest('li').addClass('active');

            e.preventDefault();

            var layout = $(this).data('layout');
            var scrollmode = $(this).data('scrollmode');
            // update renderer
            var renderer = at.alphaTab('renderer');
            renderer.Settings.Layout.Mode = layout;
            renderer.Invalidate();

            // update player
            var cursorOptions = at.alphaTab('cursorOptions');
            cursorOptions.autoScroll = scrollmode;
            $('body,html').animate({
                scrollTop: 0
            }, 300);

            at.alphaTab('playerCursorUpdateBeat', cursorOptions.currentBeat);
        });

        //
        // 4. Add cursors (optional)
        at.alphaTab('playerCursor');
    </script>
}
